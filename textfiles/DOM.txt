
DOM:
The Document Object Model (DOM) is a cross-platform and language-independent convention for representing and interacting with objects in HTML, XHTML and XML documents.[1] Aspects of the DOM (such as its "Elements") may be addressed and manipulated within the syntax of the programming language in use. The public interface of a DOM is specified in its application programming interface (API).

DOM is a way/format which inform how to access objects of HTML,XML,XHTML.

|-> Document
   |-> Element (<html>)
     |-> Element (<body>)
       |-> Element (<div>)
         |-> text node
         |-> Anchor
           |-> text node
       |-> Form
            |-> Text-box
            |-> Text Area
            |-> Radio Button
            |-> Check Box
            |-> Select
            |-> Button
			
			
#What is the Document Object Model?

The Document Object Model is a platform- and language-neutral interface that will allow programs and scripts to dynamically access and update the content, structure and style of documents. The document can be further processed and the results of that processing can be incorporated back into the presented page. This is an overview of DOM-related materials here at W3C and around the web.

#Why the Document Object Model?

"Dynamic HTML" is a term used by some vendors to describe the combination of HTML, style sheets and scripts that allows documents to be animated. The W3C has received several submissions from members companies on the way in which the object model of HTML documents should be exposed to scripts. These submissions do not propose any new HTML tags or style sheet technology. The W3C DOM Activity is working hard to make sure interoperable and scripting-language neutral solutions are agreed upon.



#HTML DOM
The HTML DOM defines a standard way for accessing and manipulating HTML documents.

#What is the DOM?
The DOM is a W3C (World Wide Web Consortium) standard.
The DOM defines a standard for accessing documents like HTML and XML:
"The W3C Document Object Model (DOM) is a platform and language-neutral interface that allows programs and scripts to dynamically access and update the content, structure, and style of a document."

@The DOM is separated into 3 different parts / levels:
Core DOM - standard model for any structured document
XML DOM - standard model for XML documents
HTML DOM - standard model for HTML documents
The DOM defines the objects and properties of all document elements, and the methods (interface) to access them.


#What is the XML DOM?

The XML DOM defines the objects and properties of all XML elements, and the methods (interface) to access them.

If you want to study the XML DOM, find the XML DOM tutorial on our Home page.

What is the HTML DOM?

The HTML DOM is:

A standard object model for HTML
A standard programming interface for HTML
Platform- and language-independent
A W3C standard
The HTML DOM defines the objects and properties of all HTML elements, and the methods (interface) to access them.

In other words: The HTML DOM is a standard for how to get, change, add, or delete HTML elements.


#XML parsing - reading xml in java
1. DOM Parser - comes with JDK |  load xml into tree structure |  slow | consume lot of memory  | javax.xml.parsers
2. SAX parser - comes with JDK, fast | less memory | doesnot load complete xml | parses line by line | startElement(),endElement(),characters() event fired when different tag comes 
3. StAX Parser - Streaming API for XML | It is not event based | maintain the cursor at current position from where data needs to be fetched. |
javax.xml.stream
http://www.javacodegeeks.com/2013/05/parsing-xml-using-dom-sax-and-stax-parser-in-java.html

4. JDOM Parser
JDOM is, quite simply, a Java representation of an XML document. JDOM provides a way to represent that document for easy and efficient reading, manipulation, and writing. It has a straightforward API, is a lightweight and fast, and is optimized for the Java programmer. Itâ€™s an alternative to DOM and SAX
JDOM is not like SAX or DOM, which bundled in JDK
import org.jdom.Document;

#JSON parsing
1. JSONParser > JSONObject : this object fetch data from Json 
http://examples.javacodegeeks.com/core-java/json/java-json-parser-example/

import org.json.simple.parser.JSONParser;