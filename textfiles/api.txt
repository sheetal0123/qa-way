#WebService :
With these we can simply call a method written in Software 2(e.g. Server, in Java) from Software 1(e.g. Client, in .net). Both software can be written in different lang.

#Tools:
For REST: http://www.telerik.com/fiddler, Postman addon , RestAPI addon
For SOAP: SOAPUI tool

For communication we need two things:
Medium  - LAN, Internet using Http etc
Format  - SOAP
Note: If two people talking over phone in english then medium= phone, format= english

Server - Also called Service Provider | webservice deployed on server and it expose few function() over internet
Client - Also called Service Consumer

#Type of WebServices(WS):
1. SOAP / Big WS
2. REST


#SOAP(Simple Object Access Protocol)
To make connection server has to give some basic details like location of deployed webservices, what all methods it exposes etc. All these basic info written in XML which is called WSDL. So reading WSDL client can connect to Server.

How to get WSDL (Web Services Description Language)
1. Service provider already know Client and can directly send its WSDL to Client.
2. Service provider can register itself with UDDI (universal directory for webservices) and add WSDL in UDDI (Universal Description,
   Discovery and Integration)
   Clent can search what services it required which will give list of all service provider. Client can then choose a particular service privder and get respective WSDL. Using WSDL client can use service provider's webservices.



#REST
1. Set of guidelines for how to connect to server (service provider) [REST WS deployed on server]
2. Data + functionality is know as resource
    a resource must be accessed  using URI by all clients just like we use website on internet

     [Client] ------------ request for resource using uri----------------> [Server]
     [Client] <------------response (representation of resource) ----------[Server]

representation of resource means resource can be provided to client in any form html,xml,text,pdf,json etc

Adv:
1. Client can directly access resource directly by sending URI to server but in SOAP WS Client need WSDL to access resource
2. response given by server is self descriptive, client can simply read and use response e.g.in shopzilla top 5 seller returned by rest ws
3. Uniform interfaces - Http used which is stateless means every request will be a new request. However any other protocol can also be used for communication.

Mainly 4 http methods are used by client in request:
GET - to get the resource
DELETE - to delete a resource

POST - Server decided what to do with a POST request, either it can create/update or anything else can be done, vast func
PUT - to update/create a resource at a particular location | smaller func compare to POST
http://stackoverflow.com/questions/107390/whats-the-difference-between-a-post-and-a-put-http-request

Functional Testing
http://www.soapui.org/  | open source for soap ws testing
https://code.google.com/p/rest-client/downloads/list  |  for rest testing | restclient-ui-3.2.2-jar-with-dependencies.jar

 Web Application Description Language (WADL): In short this is used in REST to as an alternative to WSDL in SOAP WS


#Difference between SOAP and RESTful WS
#SOAP
1. SOAP is a protocol.
2. SOAP define WSDL to expose business logic
3. Requires more bandwidth
4. Defines its own security
5. Permits XML data format only.
6. Slow
7. Generally used when you're publishing an API to the outside world that is either complex or likely to change
8. Google using SOAP WS in max cases except Blogger

#REST
1a. REST is an architectural style.
1b. REST generally use HTTP protocol but can use others protocol like SOAP
2. REST uses URI to expose business logic.
3. Requires less bandwidth, lightweight
4. Security depends on transporter like HTTP
5. Permits different data format such as Plain text, HTML, XML, JSON
6. Fast
7. It can be used in all cases other than soap ws mentioned
8. Yahoo using all Rest WS



#What is SOAP?
SOAP is an XML-based protocol to let applications exchange information over HTTP.
Or more simple: SOAP is a protocol for accessing a Web Service.
    SOAP stands for Simple Object Access Protocol
    SOAP is a communication protocol
    SOAP is a format for sending messages
    SOAP is designed to communicate via Internet
    SOAP is platform independent
    SOAP is language independent
    SOAP is based on XML
    SOAP is simple and extensible
    SOAP allows you to get around firewalls
    SOAP is a W3C standard

What is WSDL?
WSDL is an XML-based language for locating and describing Web services.
    WSDL stands for Web Services Description Language
    WSDL is based on XML
    WSDL is used to describe Web services
    WSDL is used to locate Web services
    WSDL is a W3C standard

What is UDDI?
UDDI is a directory service where companies can register and search for Web services.
    UDDI stands for Universal Description, Discovery and Integration
    UDDI is a directory for storing information about web services
    UDDI is a directory of web service interfaces described by WSDL
    UDDI communicates via SOAP
    UDDI is built into the Microsoft .NET platform


#Service-Oriented Architecture (SOA)
A service-oriented architecture is essentially a collection of services. These services communicate with each other.
 The communication can involve either simple data passing or it could involve two or more services coordinating some activity.
 Some means of connecting services to each other is needed.



**************************************************************************************************
**************************************************************************************************



 HTTP - Hyper Text Transfer Protocol
 HTTP is a TCP/IP based communication protocol, that is used to deliver data (HTML files, image files, query results, etc.) on the World Wide Web. The default port is TCP 80, but other ports can be used as well. It provides a standardized way for computers to communicate with each other. HTTP specification specifies how clients' request data will be constructed and sent to the server, and how the servers respond to these requests.

 HTTP is based on the client-server architecture model and a stateless request/response protocol that operates by exchanging messages across a reliable TCP/IP connection.

 *original version: HTTP/1.0 - It uses a new connection for each request/response exchange (Non Persistent Behaviour)
 	If a page has 5 images then for each image(or object) a new TCP connection get created which is a huge time waste
 *new version: HTTP/1.1 - It uses same TCP connection for one or more request/response exchanges (Persistent)
 Server leaves the connection open, so that more object can come and close on time out


 WebClient   <------------------------------> WebServer/Web Application  --------------WebResources
 (browsers)										(Appache Tomcat)                      (Static/Dynamic)


 Web Resources - Any files like pdf,images which contains some information. If data is not changing then it is static else dynamic resourses
 Dynamic resources - generated by web server on the fly when client request it.

 http://www.abc.com/a/path-of-webdocs.html
 http - protocol used for data transfer other protocol are ftp. http protocol is stateless means server dont remember if same req comes again and again.
 www.abc.com  - web server
 /a/path-of-webdocs.html  -  path of web resource


 -----------------------------------------------------------------------------
 #Basic Features
 There are three basic features that make HTTP a simple but powerful protocol:

 1. HTTP is connectionless: The HTTP client, i.e., a browser initiates an HTTP request and after a request is made, the client disconnects from the server and waits for a response. The server processes the request and re-establishes the connection with the client to send a response back.

 2. HTTP is media independent: It means, any type of data can be sent by HTTP as long as both the client and the server know how to handle the data content. It is required for the client as well as the server to specify the content type using appropriate MIME-type.

 3. HTTP is stateless: As mentioned above, HTTP is connectionless and it is a direct result of HTTP being a stateless protocol. The server and client are aware of each other only during a current request. Afterwards, both of them forget about each other. Due to this nature of the protocol, neither the client nor the browser can retain information between different requests across the web pages.


 Client
 The HTTP client (Browser) sends a request to the server in the form of a request method, URI, and protocol version, followed by a MIME-like message containing request modifiers, client information, and possible body content over a TCP/IP connection.

 Server
 The HTTP server responds with a status line, including the message's protocol version and a success or error code, followed by a MIME-like message containing server information, entity meta information, and possible entity-body content.

 -----------------------------------------------------------------------------
 #HTTP Parameters
 1. HTTP Version - HTTP/1.0  or HTTP/1.1
 2. Uniform Resource Identifiers URI - case insensitive text showing domain, port, location etc
 	URI = "http:" "//" host [ ":" port ] [ abs_path [ "?" query ]]             | default port=80 if not given
 	e.g. http://abc.com:80/smith/home.html
 3. Date/Time Formats - GMT time followed e.g.  Sun, 06 Nov 1994 08:49:37 GMT  ; RFC 822, updated by RFC 1123
 4. Character Sets - We use character sets to specify the character sets that the client prefers. Multiple character sets can be listed separated by commas. If a value is not specified, the default is the US-ASCII.
 other char set used - ISO-8859-1, ISO-8859-7
 5. Content Encodings - A content encoding value indicates that an encoding algorithm has been used to encode the content before passing it over the network e.g.
 Accept-encoding: gzip
 Accept-encoding: compress
 Accept-encoding: deflate
 6. Media Types e.g. Accept: image/gif
 7. Language Tags e.g. en, en-US, en-cockney, i-cherokee, x-pig-latin

 -----------------------------------------------------------------------------
 #HTTP Message
 HTTP makes use of the Uniform Resource Identifier (URI) to identify a given resource and to establish a connection. Once the connection is established, HTTP messages are passed. These messages include requests from client to server and responses from server to client which will have the following format
 HTTP-message   = <Request> | <Response> ; HTTP/1.1 messages

 HTTP requests and HTTP responses use a generic message format of RFC 822 for transferring the required data.

 This generic message format consists of the following four items.
 1. A Start-line
 GET /hello.htm HTTP/1.1     (This is Request-Line sent by the client)
 HTTP/1.1 200 OK             (This is Status-Line sent by the server)

 2. Zero or more header fields followed by CRLF
 HTTP header fields provide required information about the request or response, or about the object sent in the message body
 Header e.g.
 User-Agent: curl/7.16.3 libcurl/7.16.3 OpenSSL/0.9.7l zlib/1.2.3
 Host: www.example.com
 Accept-Language: en, mi
 Date: Mon, 27 Jul 2009 12:28:53 GMT
 Server: Apache
 Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT

 3. An empty line indicating the end of the header fields
 4. Optionally a message-body
 A message body is the one which carries the actual HTTP request data (including form data and uploaded, etc.) and HTTP response data from the server ( including files, images, etc.)

#-----------------------------------------------------------------------------------------------------------------------------#

 #HTTP Requests
 An HTTP client sends an HTTP request to a server in the form of a request message which includes following 4 part:
 1. A Request-line
 Request-Line = (Request Method) SP Request-URI SP HTTP-Version CRLF
 Request methods are case sensitive and should be in upper case

 Request Methods:
 a. GET
 /test/demo_form.asp?name1=value1&name2=value2
 GET requests can be cached
 GET requests remain in the browser history
 GET requests can be bookmarked
 GET requests should never be used when dealing with sensitive data
 GET requests have length restrictions
 GET requests should be used only to retrieve data

 GET is used when we have to get some data from server
 POST is used when we have to post/submit/change some data on web server

 b. POST
 POST /test/demo_form.asp HTTP/1.1
 Host: w3schools.com
 name1=value1&name2=value2

 Note that the query string (name/value pairs) is sent in the HTTP message body of a POST request
 POST are used to save new content on server
 POST requests are never cached
 POST requests do not remain in the browser history
 POST requests cannot be bookmarked
 POST requests have no restrictions on data length

 c. HEAD
 Same as GET, both send same type of request format. In GET server respond with Header + Body, but in case of HEAD, server response only with header i.e. no body

 d. PUT
 PUT is used to update new content on server means files already present and we are updating them
 It ask server to store attached body  in /hello.htm
 PUT /hello.htm HTTP/1.1
 User-Agent: Mozilla/4.0 (compatible; MSIE5.01; Windows NT)
 Host: www.tutorialspoint.com
 Accept-Language: en-us
 Connection: Keep-Alive
 Content-type: text/html
 Content-Length: 182
 <html>
 <body>
 <h1>Hello, World!</h1>
 </body>
 </html>


 e. DELETE
 f. CONNECT
 g. OPTION
 h. TRACE


 2. Zero or more header (General|Request|Entity) fields followed by CRLF
 3. An empty line indicating the end of the header fields
 4. Optionally a message-body


 ##GET
 Request Format:
 GET /hello.htm HTTP/1.1
 User-Agent: Mozilla/4.0 (compatible; MSIE5.01; Windows NT)
 Host: www.tutorialspoint.com
 Accept-Language: en-us
 Accept-Encoding: gzip, deflate
 Connection: Keep-Alive

 Server Response Format: The server side script process.cgi processes the passed data and sends the following response:
 HTTP/1.1 200 OK
 Date: Mon, 27 Jul 2009 12:28:53 GMT
 Server: Apache/2.2.14 (Win32)
 Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT
 ETag: "34aa387-d-1568eb00"
 Vary: Authorization,Accept
 Accept-Ranges: bytes
 Content-Length: 88
 Content-Type: text/html
 Connection: Closed
 <html>
 <body>
 <h1>Hello, World!</h1>
 </body>
 </html>


 ##POST
 Request Format:
 POST /cgi-bin/process.cgi HTTP/1.1
 User-Agent: Mozilla/4.0 (compatible; MSIE5.01; Windows NT)
 Host: www.tutorialspoint.com
 Content-Type: text/xml; charset=utf-8
 Content-Length: 88
 Accept-Language: en-us
 Accept-Encoding: gzip, deflate
 Connection: Keep-Alive
 <?xml version="1.0" encoding="utf-8"?>
 <string xmlns="http://clearforest.com/">string</string>


 Server Response Format: The server side script process.cgi processes the passed data and sends the following response:
 HTTP/1.1 200 OK
 Date: Mon, 27 Jul 2009 12:28:53 GMT
 Server: Apache/2.2.14 (Win32)
 Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT
 ETag: "34aa387-d-1568eb00"
 Vary: Authorization,Accept
 Accept-Ranges: bytes
 Content-Length: 88
 Content-Type: text/html
 Connection: Closed
 <html>
 <body>
 <h1>Request Processed Successfully</h1>
 </body>
 </html>
 
 
 
 #CONNECT
 As a rule of thumb GET is used for plain HTTP and CONNECT for HTTPS
 https://stackoverflow.com/questions/11697943/when-should-one-use-connect-and-get-http-methods-at-http-proxy-server
 
 
#-------------------------------------------------------------------------------------#

 #HTTP Response
 Response contains following four part:
 1. A Status-line
 Status-Line = [HTTP-Version] SP [Status-Code] SP Reason-Phrase CRLF
 e.g. HTTP/1.1 404 Not Found

 HTTP-Version = HTTP/1.1
 Status Code:
 1 	1xx: Informational - It means the request was received and the process is continuing.
 2 	2xx: Success - It means the action was successfully received, understood, and accepted.
 3 	3xx: Redirection - It means further action must be taken in order to complete the request.
 4 	4xx: Client Error - It means the request contains incorrect syntax or cannot be fulfilled.
 5 	5xx: Server Error - It means the server failed to fulfill an apparently valid request.

 code e.g.
 301 Moved Permanently 	The requested page has moved to a new url .
 302 Found 	The requested page has moved temporarily to a new url .
 400 Bad Request 	The server did not understand the request.
 401 Unauthorized 	The requested page needs a username and a password.
 500 Internal Server Error 	The request was not completed. The server met an unexpected condition.
 502 Bad Gateway 	The request was not completed. The server received an invalid response from the upstream server.


 2. Zero or more header (General|Response|Entity) fields followed by CRLF
 Server: Apache/2.2.14 (Win32)
 Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT
 Content-Length: 88
 Content-Type: text/html
 Connection: Closed

 3. An empty line indicating the end of the header fields
 4. Optionally a message-body
 <html>
 	<body>
 		<h1>Hello, World!</h1>
 	</body>
 </html>



#---------------------------------------------------------------------------------------#

Cookies:

 -Cookies comes into picture because HTTP is stateless and server dont remember anything about client. But we need to know about client behaviour hence cookies is the answer.
 -When client request something, server response with data and along with that send a cookie which get stored in browser.
 -Next time browser send request, it will send cookies along with request. Now server will read and come to know about user.


 Client <---> Proxy Server<<<---------HTTP protocol----------------->>> Proxy Server<---->WebServer(Amazon)
            (office to block some site)                      (for caching,Amazon side, increase performance)

 If client/cleints send same request again and again the we will cache the information and put in proxy server. Now new request will not go to main web server, proxy server can handle all duplicate request.

 
#---------------------------------------------------------------------------------------# 
Secure Hypertext Transfer Protocol (S-HTTP) 

SHTTP: is a little-used alternative to the HTTPS URI scheme for encrypting web communications carried over HTTP. S-HTTP is defined in RFC 2660. It was developed by Eric Rescorla and Allan M. Schiffman.[1]
Web browsers typically use HTTP to communicate with web servers, sending and receiving information without encrypting it. For sensitive transactions, such as Internet e-commerce or online access to financial accounts, the browser and server must encrypt this information. HTTPS and S-HTTP were both defined in the mid-1990s to address this need. Netscape and Microsoft supported HTTPS rather than S-HTTP, leading to HTTPS becoming the de facto standard mechanism for securing web communications.

Differences with HTTPS
S-HTTP encrypted only the page data, and data such as POST fields, leaving the initiation of the protocol unchanged. Because of this, S-HTTP could be used concurrently with HTTP (unsecured) on the same port, as the unencrypted header would determine whether the rest of the transmission would be encrypted.
In contrast, HTTPS wraps the entire communication within SSL, so the encryption starts before any protocol data is sent. This also means that it requires a separate port (usually 443 vs. HTTP's standard 80)[2] and unambiguous usage (treated in most browsers as a separate URI protocol, https://).
In S-HTTP, the desired URL is not transmitted in the cleartext headers, but left blank; another set of headers is present inside the encrypted payload. In HTTPS, all headers are inside the encrypted payload.



#---------------------------------------------------------------------------------------#
#---------------------------------------------------------------------------------------#

API Testing by Dave djwester (Lynda Course, EPAM)


Types of API
REST : server and client loosly coupled
SOAP : server and client tightly coupled 
GraphQL  :  Bridge gap b/w Rest and SOAP api, using adv of both 
Hypermedia : When we hit a page, page give user some allowed operation like links to open new page, buttons to POST something etc


GET
POST : To create new data on server
PUT  : To update existing data
DELETE
HEAD
OPTIONS
TRACE
PATCH

#Idempotency : 
- Action that will return same server state whenever called.  
- Clients can make that same call repeatedly while producing the same result
Note that while idempotent operations produce the same result on the server (no side effects), the response itself may not be the same (e.g. a resource's state may change between requests).
- The PUT and DELETE methods are defined to be idempotent
- However, when the service actually deletes the resource, the next call will not find the resource to delete it and return a 404. However, the state on the server is the same after each DELETE call, but the response is different.


#Safe : 
- Safe methods are HTTP methods that do not modify resources
- GET, HEAD, OPTIONS and TRACE methods are defined as safe, meaning they are only intended for retrieving data. This makes them idempotent as well since multiple, identical requests will behave the same.


Method	Idempotent	Safe
OPTIONS	yes			yes
GET		yes			yes
HEAD	yes			yes
PUT		yes			no
POST	no			no
DELETE	yes			no
PATCH	no			no



#API Risks:
1. API Version change : structure changes, test cases get failed, functionality changes
2. Internet Issue : slow connection
3. Availability Issue : Permission revoked etc
4. Timing : Action sent in certain order can be received in different order, all depend on server
5. concurrent changes: If two ppl are changing some resource on server
6. Performance: if some user/code sends thousands of req in small time
7. Security

#try to delete repo from github
bigD   token to delete repo in sheetalsingh git hub account
96d18565833de039217edec15eafd4b6fa73d9a7 
http://api.github.com/repos/sheetalsingh/testrepo


#testing a api
- use hit and trial and explore as much as we can
- data shd be in sync
https://swapi.co/api/people/1/         this lives in planet 1
https://swapi.co/api/planets/1/         planet 1 contains people1

- security, sometimes api give option for search
https://swapi.co/api/people/?search=Luke
https://swapi.co/api/people/?search=hidden			 can be dangerous

- to get schema   https://swapi.co/api/people/schema


#quiz
clone https://github.com/djwester/api-testing-foundations
run cmd inside folder:
npm install
node find_the_secret_server.js
http://localhost:3000/  will be up and running

http://localhost:3000/profiles/1   we dont have access to profiles and will get 401 Unauthorized
http://localhost:3000/blogposts/1?_embed=comments       allowed
http://localhost:3000/blogposts/1?_embed=profiles       using this we have bypassed 401



#POST
http://localhost:3000/blogposts

data to be post:
{
        "id": 4,
        "title": "My Fouth Blog Post",
        "author": "Sheetal4"
}
http://localhost:3000/blogposts/4

http://localhost:3000/blogposts/123656
http://localhost:3000/blogposts/1e+308
http://localhost:3000/blogposts/9007199254740992


#PUT
In put everything cant be updated like id etc

http://localhost:3000/blogposts/1
{
  "id": 1,
  "title": "My Updated First Blog Post",
  "author": "Sheetal"
}


#DELETE
http://localhost:3000/blogposts/1

http://localhost:3000/avatars/1    show avatars details
http://localhost:3000/blogposts/1   show blog post details only
http://localhost:3000/avatars/1?_expand=blogpost   show combination of above two
http://localhost:3000/avatars/1?_expand=comment    same as above


diff?
http://localhost:3000/avatars/1?_embed=blogpost
http://localhost:3000/avatars/1?_expand=blogpost


#Framework
Data Driven : hit each and every api one by one. It will be hectic and very heavy
Workflow Driver: hit api in sequence an normal user do. test logical path. passing data need to handle properly.




#---------------------------------------------------------------------------------------#
#---------------------------------------------------------------------------------------#


#Learning Postman Tools
by https://github.com/DannyDainton/All-Things-Postman

https://restful-booker.herokuapp.com/apidoc/index.html

#---------------------------------------------------------------------------------------#
#---------------------------------------------------------------------------------------#


Rest Assured :
Udemy Course:

https://jsoneditoronline.org/                              | json formatting
https://www.freeformatter.com/json-escape.html#ad-output   | json to string conversion

#Manual bookmark

chp 17 : 11:50: verify response headers values
chp 18 : 6:00 : Query vs Path vs Header param
chp 19:  6:00 : Calling create / delete api together	
chp 22: imp: complete test showing create > extract > delete api 	
	
	
#Understanding JSON:
#Arrays: [a, b, c]
any element followed by [  is an array

#Object: {k:v}
any element followed by {  is an object


	
	
	
	
	
#Standard Format:
given()
    .param()      //parameters (k:v) pairs   
	.header()     //request header           
	.cookie()     //request cookies          
when()
    get(resources)	
	post/put(resources)
then()
	assertion
	

#Generally we use Get/Post
DELETE, PUT, POST can be used using POST request


# Parameter types
1. Path parameters     www.domain.com/resources/json/abc/xyz
   Path param as part of url only. Only in GET not in POST, as payload sent in body in case ofPost
2. Query parameter     www.domain.com/resources/json?k1=v1&k2=v2
   query param are sent in url as k,v pair in url 
3. Header parameter	
   sent in header as k,v pair 	

Diff: Use query paramter to filter the resources and use the Path parameter to get a unique resource.


#Xml Path
https://www.javadoc.io/doc/com.jayway.restassured/rest-assured/1.4/com/jayway/restassured/path/xml/XmlPath.html


# This method convert Json/XML file content into String representation
public static String generateStringFromResource(String path) throws IOException {
		return new String(Files.readAllBytes(Paths.get(path)));
}


	
#Jira API
Download 30day trial: https://www.atlassian.com/software/jira/download
Jira videos to test on home PC



API: https://developer.atlassian.com/cloud/jira/platform/jira-rest-api-cookie-based-authentication/


****************************************************************

#OAuth 2.0
Its a framework for authorization and to delegation work
OAuth 2.0 is the industry-standard protocol for authorization

Grant Type
1. Authorization Code  : All site allow login with Google/FB 
2. Client Credential 


#Pre:
BookMyShow register with Google and will received ClientID and ClientSecretID(pwd)

#Info
Resource Owner : Me
Auth Server : Google [We sign in to google and allow Google to pass my info to Client server]
Resource Server : Google [contains all my data like personal details location etc]
Client Server: BookMyShow


#Step:
SignIn to BookMyShow
BookMyShow (Client Server)   ------- >     Auth Server(Google) / User enter google credentials
Client receive "code" only   <------   Auth Server
Client Server with "code"   ------->   Resource Server 
Clinet Server receive "access_token"   <---------  Resource Server
Now if we hit Client Server with "access_token" then all details will come 
Access Token will be saved in cookies and on every other req this token will be shared




#request query param
scope: defined what kind of info Client required from Resource Server
auth_url : auth server url
client_id : client id to identify client
response_type : code, what cleint is expecting from google
redirect_url: client url where user shd land after authentication from google
state: for security testing 


# Client Credential 
Interaction between Client and Resource Server only i.e. no Human involvement to give crdentials like in case of Authorization Code
Application request Server for own data

E.g. Client(BookMyShow) asking Twitter (Server) to send all tweets which mention Cient twitter tag.
E.g. Airline(Client) send details of customer tickets to Hotels(Server) and Hotels send Hotel details to customer



****************************************************************

# API Strategies:
https://www.sisense.com/blog/rest-api-testing-strategy-what-exactly-should-you-test/

A. API Contract:
making sure that endpoints are correctly named, that resources and their types correctly reflect the object model, that there is no missing functionality or duplicate functionality, and that relationships between resources are reflected in the API  correctly.

B. API test actions 
1. Verify correct HTTP status code
2. Verify response payload
3. Verify response headers
4. Verify correct application state
5. Verify basic performance sanity

C. Test scenario categories
Our test cases fall into the following general test scenario groups:
1. Basic positive tests (happy paths)
2. Extended positive testing with optional parameters
3. Negative testing with valid input - duplicate user
4. Negative testing with invalid input - wrong data
5. Destructive testing - deeper negative testing, sending very huge payload
6. Security, authorization, and permission tests 

D. Test Flows
1. Testing requests in isolation - testing single api with some input and output
2. Multi-step workflow with several requests - testing series of apis which are used in actual user flows.
3. Combined API and web UI tests - Mostly used in Manual. Run api and see effects on UI and vice versa


Returned status code is according to spec: 
– 200 OK for GET requests
– 201 for POST or PUT requests creating a new resource 
– 200, 202, or 204 for a DELETE operation and so on

Rest Template
depricate
May get depricate and dont support async calls 
https://stackoverflow.com/questions/47974757/webclient-vs-resttemplate?rq=1#:~:text=The%20RestTemplate%20will%20be%20deprecated%20in%20a%20future%20version%20and,new%20features%20added%20going%20forward.&text=WebClient%20is%20Non%2DBlocking%20Client,serves%20as%20a%20web%20customer

